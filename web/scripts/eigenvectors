#!/usr/bin/perl -w -I/path/to/politicalsurvey/lib
#
# eigenvectors:
# Display the first two principal axes.
#
# Copyright (c) 2003 Chris Lightfoot. All rights reserved.
# Email: chris@ex-parrot.com; WWW: http://www.ex-parrot.com/~chris/
#

my $rcsid = ''; $rcsid .= '$Id: eigenvectors,v 1.3 2003/11/18 23:43:38 chris Exp $';

use strict;

use CGI::Fast qw(-no_xhtml);
use CGI::Carp;
use HTML::Entities;
use Error qw(:try);

use PoliticalSurvey;
use PoliticalSurvey::Graphics;

use constant subset => 40;

my $dbh = PoliticalSurvey::DB::database();

try {
    while (my $q = new CGI::Fast()) {
        # Either get the set of statements for this result set, or just use
        # the lowest-numbered one.
        my $setid = 1;
        my $id = $q->param('surveyid');
        if (defined($id)) {
            my $ans = PoliticalSurvey::DB::get_answers($dbh, $id);
            $setid = PoliticalSurvey::DB::get_statementset($dbh, $ans);
        }

        my $nav = '<p><a href="#ev1">First axis</a> | <a href="#ev2">Second axis</a></p>';

        print "Content-Type: text/html; charset=iso-8859-1\n\n",
                PoliticalSurvey::HTML::html_head("Political Survey: Eigenvectors"),
                $q->p(q(These are the two principal axes derived from all the
                        survey responses and against which your answers are
                        judged. The names in inverted commas should not be
                        taken too seriously; they are only labels. If you want
                        to know what each axis "means", read the list of
                        statements which make it up. Note that the data give
                        as many principal axes as there are statements, but all
                        but the first two don't correspond to real systematic
                        variation in the results.)),
                $q->p(q(Only the first (most important) ), subset, q(
                        statements are shown. Note that the direction of the
                        axes is, obviously, arbitrary, but for clarity we have
                        picked particular directions, as noted below. The
                        "strength" of each statement indicates how important it
                        is in determining your position on each axis; the
                        position is obtained by multiplying your response to
                        each statement, ranging from -2 for "disagree strongly"
                        to +2 for "agree strongly", by the "strength", and
                        adding up all the values.)),
                $q->p(q(Note that you may not have seen <em>exactly</em> these
                        statements when you took the survey; rather, in some
                        cases you may have seen the opposite statements. You
                        can see the <a href="statementlist">complete list of
                        statements</a>, which shows each statement in both
                        forms. Below we have written out each axis in the form
                        of a list of the all the statements with which somebody
                        on the extreme end of the axis would agree.)),
                $nav;

        print $q->h2($q->a({name => 'ev1'},
                            q(First eigenvector ("left/right")))),
                $q->p(q(This axis is quite like the familiar left/right
                        political division. It mixes economic issues --
                        varying from <em>laisser faire</em> to interventionist
                        perspective -- and social or "moral" issues such as
                        recommending the death penalty to punish criminals. We
                        choose to give "the right" positive values on this
                        axis.));

        my $e1 = PoliticalSurvey::DB::get_eigenvector($dbh, $setid, 0);

        my @ord = sort { abs($e1->[$b]) <=> abs($e1->[$a]) } (0 .. scalar(@$e1) - 1);

        my %stext = map { $_->[0] => [$_->[1], $_->[2]] } @{$dbh->selectall_arrayref('select id, normal, converse from statement')};

        print "<table><tr><th>Statement</th><th>Strength</th></tr>";
        foreach (@ord[0..subset - 1]) {
            print "<tr><td>",
                    encode_entities($stext{$_}->[$e1->[$_] > 0 ? 0 : 1]),
                    "</td><td>",
                    sprintf("%.4f", abs($e1->[$_])),
                    "</td></tr>";
        }
        my $total = 0;
        foreach (@ord[subset..$#ord]) {
            $total += abs($e1->[$_]);
        }
        printf "<tr><td><em>all others</em></td><td>%.4f</td></tr>", $total;

        print "</table>", $nav;

        print $q->h2($q->a({name => 'ev2'},
                        q(Second eigenvector ("pragmatism")))),
                $q->p(q(This axis is much less important than the first. It
                        represents a combination of philosophies you could call
                        "pragmatism", "utilitarianism" and so forth, mixing
                        social, religious and economic issues. We have chosen
                        to give an atheist, utilitarian perspective positive
                        values on this axis.));

        $e1 = PoliticalSurvey::DB::get_eigenvector($dbh, $setid, 1);

        @ord = sort { abs($e1->[$b]) <=> abs($e1->[$a]) } (0 .. scalar(@$e1) - 1);

        print "<table><tr><th>Statement</th><th>Strength</th></tr>";
        foreach (@ord[0..subset - 1]) {
            print "<tr><td>",
                    encode_entities($stext{$_}->[$e1->[$_] > 0 ? 0 : 1]),
                    "</td><td>",
                    sprintf("%.4f", abs($e1->[$_])),
                    "</td></tr>";
        }

        $total = 0;
        foreach (@ord[subset..$#ord]) {
            $total += abs($e1->[$_]);
        }
        printf "<tr><td><em>all others</em></td><td>%.4f</td></tr>", $total;

        print "</table>", $nav;



        print PoliticalSurvey::HTML::html_tail();

        # Work around SQLite brokenness.
        $dbh->rollback();
    }
} catch Error::Simple with {
    my $E = shift;
    my $msg = sprintf('%s:%d: %s', $E->file(), $E->line(), $E->text());
    warn "caught fatal exception: $msg";
    warn "aborting";
    encode_entities($msg);
    print "Status: 500\nContent-Type: text/html; charset=iso-8859-1\n\n",
            PoliticalSurvey::HTML::html_head("Political Survey: error"),
            q(<p>Unfortunately, something went wrong. The text of the error
                    was:</p>),
            qq(<blockquote class="errortext">$msg</blockquote>),
            q(<p>Please try again later.),
            PoliticalSurvey::HTML::html_tail();
};

$dbh->disconnect();

