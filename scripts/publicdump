#!/usr/bin/perl -w -I/path/to/politicalsurvey/lib
#
# publicdump:
# Generate an SQL dump of the data suitable for public release.
#
# Copyright (c) 2003 Chris Lightfoot. All rights reserved.
# Email: chris@ex-parrot.com; WWW: http://www.ex-parrot.com/~chris/
#

my $rcsid = ''; $rcsid .= '$Id: publicdump,v 1.3 2003/11/26 22:31:48 chris Exp $';

use strict;

use Error qw(:try);

use PoliticalSurvey;

my $random_key = int(rand(0xffffff));

sub remap_id ($) {
    my $id = shift;
    return ($id * $random_key) % 1_000_000;
}

sub dump_table ($$$@) {
    my ($fh, $dbh, $tbl, $s) = @_;
    $fh->print("delete from $tbl;\n");
    my $st = $dbh->prepare($s);
    $st->execute();
    
    while (my $row = $st->fetchrow_hashref()) {
        my @cols = keys %$row;
        $fh->print("insert into table $tbl (", join(", ", @cols), ') values (',
                        join(", ", map { $dbh->quote($row->{$_}) } @cols), ");\n");
    }
}

my $dbh = PoliticalSurvey::DB::database();

try {
    # Only dump statement, answer, session, celebrity, celebrityanswerrationale, eigenvalue, eigenvector, selfcovariance, statementset
    print "-- Public dump of Political Survey data\n";
    print "-- See http://politics.beasts.org/privacy.shtml for a description\n";
    print "-- of how this compares to the actual data stored by the site. This\n";
    print "-- dump is generated by scripts/publicdump\n";
    print "-- \n",
    print "-- generated ", scalar(localtime), ", at which time there were ",
            PoliticalSurvey::DB::select_single_value($dbh, 'select count(*) from session'),
            " responses\n";
    
    dump_table(\*STDOUT, $dbh, 'statement',
            'select id, normal, converse, enabled from statement');
    my $t = time;
    dump_table(\*STDOUT, $dbh, 'session',
            "select (id + $random_key) % 100000 as id, '127.0.0.1' as ipfrom, country, $t as timewhen from session");
    dump_table(\*STDOUT, $dbh, 'answer',
            "select (sessionid + $random_key) % 1000000 as sessionid, statementid, converse, value from answer");
    dump_table(\*STDOUT, $dbh, 'celebrity',
            "select (sessionid + $random_key) % 1000000 as sessionid, name, country, notes, image from celebrity");
    dump_table(\*STDOUT, $dbh, 'celebrityanswerrationale',
            "select (sessionid + $random_key) % 1000000 as sessionid, statementid, rationale from celebrityanswerrationale");
    dump_table(\*STDOUT, $dbh, 'statementset',
            "select id, newdata, members from statementset");
    dump_table(\*STDOUT, $dbh, 'eigenvalue',
            "select setid, n, val from eigenvalue");
    dump_table(\*STDOUT, $dbh, 'eigenvalue',
            "select setid, n, i, x from eigenvector");
    dump_table(\*STDOUT, $dbh, 'selfcovariance',
            "select statementid, until, numpts, sumxy, sumxx, sumyy, sumx, sumy from selfcovariance");
} catch Error::Simple with {
    my $E = shift;
    STDERR->printf("%s:%d: %s\n", $E->file(), $E->line(), $E->text(), $E->stacktrace());
    STDERR->print("publicdump: failed; aborting\n");
};

